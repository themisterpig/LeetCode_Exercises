BOM (Byte Order Mark) is a special combination of bits announcing encoding used by a file's content (eg. UCS-4 or UTF-B).

Is Python 3 I18Ned? Yes, it's completely internationalized - we can use UNICODE characters inside our code, read them from input and send to output.


print('[' + 'alpha'.center(10) + ']')
-> [  alpha   ]

print('[' + 'gamma'.center(20, '*') + ']')
-> print('[' + 'gamma'.center(20, '*') + ']')

if "epsilon".endswith("on"):
    print("yes")
else:
    print("no")

print(",;".join(["omicron", "pi", "rho"]))
omicron,;pi,;rho


print("I know that I know nothing. Part 1.".title())
print("I know that I know nothing.".swapcase())

->I Know That I Know Nothing. Part 1.
-> i KNOW THAT i KNOW NOTHING.


capitalize() – changes all string letters to capitals;
center() – centers the string inside the field of a known length;
count() – counts the occurrences of a given character;
join() – joins all items of a tuple/list into one string;
lower() – converts all the string's letters into lower-case letters;
lstrip() – removes the white characters from the beginning of the string;
replace() – replaces a given substring with another;
rfind() – finds a substring starting from the end of the string;
rstrip() – removes the trailing white spaces from the end of the string;
split() – splits the string into a substring using a given delimiter;
strip() – removes the leading and trailing white spaces;
swapcase() – swaps the letters' cases (lower to upper and vice versa)
title() – makes the first letter in each word upper-case;
upper() – converts all the string's letter into upper-case letters.


endswith() – does the string end with a given substring?
isalnum() – does the string consist only of letters and digits?
isalpha() – does the string consist only of letters?
islower() – does the string consists only of lower-case letters?
isspace() – does the string consists only of white spaces?
isupper() – does the string consists only of upper-case letters?
startswith() – does the string begin with a given substring?


The first is implemented as a function named sorted().


The function takes one argument (a list) and returns a new list, filled with the sorted argument's elements. (Note: this description is a bit simplified compared to the actual implementation - we'll discuss it later.)
The second method affects the list itself - no new list is created. Ordering is performed in situ by the method named sort().


The raise instruction raises the specified exception named exc as if it was raised in a normal (natural) way:


Now is a good moment to show you another Python instruction, named assert. This is a keyword.

It evaluates the expression;
if the expression evaluates to True, or a non-zero numerical value, or a non-empty string, or any other value different than None, it won't do anything else;
otherwise, it automatically and immediately raises an exception named AssertionError (in this case, we say that the assertion has failed)


ArithmeticError
Description: an abstract exception including all exceptions caused by arithmetic operations like zero division or an argument's invalid domain


AssertionError
Description: a concrete exception raised by the assert instruction when its argument evaluates to False, None, 0, or an empty string

BaseException
Description: the most general (abstract) of all Python exceptions - all other exceptions are included in this one; it can be said that the following two except branches are equivalent: except: and except BaseException:.

IndexError
Description: a concrete exception raised when you try to access a non-existent sequence's element (e.g., a list's element)

LookupError
Description: an abstract exception including all exceptions caused by errors resulting from invalid references to different collections (lists, dictionaries, tuples, etc.)

MemoryError
Description: a concrete exception raised when an operation cannot be completed due to a lack of free memory.

self.__stack_list = [] <- private
self.stack_list = [] <- public


Python provides a function which is able to safely check if any object/class contains a specified property.
 The function is named hasattr, and expects two arguments to be passed to it:



to call a private function:
class Classy:
    def visible(self):
        print("visible")

    def __hidden(self):
        print("hidden")

obj = Classy()
obj._Classy__hidden()


introspection: which is the ability of a program to examine the type or properties of an object at runtime;
reflection: which goes a step further, and is the ability of a program to manipulate the values, properties and/or functions of an object at runtime.

setattr(object, name, value) change the value of the instance


class Snake:
    pass


class Python(Snake):
    pass


print(Python.__name__, 'is a', Snake.__name__)
print(Python.__bases__[0].__name__, 'can be', Python.__name__)
---------------output-------------------
Python is a Snake
Snake can be Python

Inheritance: issubclass()
Python offers a function which is able to identify a relationship between two classes,
and although its diagnosis isn't complex, it can check if a particular class is a subclass of any other class.

Inheritance: isinstance()
As you already know, an object is an incarnation of a class. This means that the object is like a cake baked using a recipe which is included inside the class.

two = lambda: 2
sqr = lambda x: x * x
pwr = lambda x, y: x ** y

for a in range(-2, 3):
    print(sqr(a), end=" ")
    print(pwr(a, two()))


def print_function(args, fun):
    for x in args:
        print('f(', x,')=', fun(x), sep='')

print_function([x for x in range(-2, 3)], lambda x: 2 * x**2 - 4 * x + 2)


r open mode: read
the stream will be opened in read mode;
the file associated with the stream must exist and has to be readable, otherwise the open() function raises an exception.

w open mode: write
the stream will be opened in write mode;
the file associated with the stream doesn't need to exist; if it doesn't exist it will be created; if it exists, it will be truncated to the length of zero (erased); if the creation isn't possible (e.g., due to system permissions) the open() function raises an exception.

a open mode: append
the stream will be opened in append mode;
the file associated with the stream doesn't need to exist; if it doesn't exist, it will be created; if it exists the virtual recording head will be set at the end of the file (the previous content of the file remains untouched.)

r+ open mode: read and update
the stream will be opened in read and update mode;
the file associated with the stream must exist and has to be writeable, otherwise the open() function raises an exception;
both read and write operations are allowed for the stream.

w+ open mode: write and update
the stream will be opened in write and update mode;
the file associated with the stream doesn't need to exist; if it doesn't exist, it will be created; the previous content of the file remains untouched;
both read and write operations are allowed for the stream.


from os import strerror

try:
    s = open("c:/users/user/Desktop/file.txt", "rt")
    # Actual processing goes here.
    s.close()
except Exception as exc:
    print("The file could not be opened:", strerror(exc.errno))

-> The file could not be opened: No such file or directory


How do you encode an open() function’s mode argument value if you're going to create a new text file to only fill it with an article?
->"wt" or "w"



if error.errno == errno.ENOENT: -> file doesnt exists



import os

os.makedirs("my_first_directory/my_second_directory")
os.chdir("my_first_directory")
print(os.getcwd())
os.chdir("my_second_directory")
print(os.getcwd())

creates two directory one inside the other



import time

timestamp = time.time()
print(time.ctime(timestamp))
-> Mon Oct 10 15:01:53 2022
----------------------------------------

import time

timestamp = 1572879180
print(time.gmtime(timestamp))
print(time.localtime(timestamp))

time.struct_time(tm_year=2019, tm_mon=11, tm_mday=4, tm_hour=14, tm_min=53, tm_sec=0, tm_wday=0, tm_yday=308, tm_isdst=0)
time.struct_time(tm_year=2019, tm_mon=11, tm_mday=4, tm_hour=14, tm_min=53, tm_sec=0, tm_wday=0, tm_yday=308, tm_isdst=0)

----------------------------------------
from datetime import datetime

dt = datetime(2019, 11, 4, 14, 53)

print("Datetime:", dt)
print("Date:", dt.date())
print("Time:", dt.time())

Datetime: 2019-11-04 14:53:00
Date: 2019-11-04
Time: 14:53:00
----------------------------------------

The datetime class has several methods that return the current date and time. These methods are:

today() — returns the current local date and time with the tzinfo attribute set to None;
now() — returns the current local date and time the same as the today method, unless we pass the optional argument tz to it. The argument of this method must be an object of the tzinfo subclass;
utcnow() — returns the current UTC date and time with the tzinfo attribute set to None.

today: 2022-10-10 15:18:32.334165
now: 2022-10-10 15:18:32.334269
utcnow: 2022-10-10 15:18:32.334318

getting a timestamp
from datetime import datetime

dt = datetime(2020, 10, 4, 14, 55)
print("Timestamp:", dt.timestamp())

----------------------------------------

import calendar
print(calendar.month(2020, 11))

November 2020
Mo Tu We Th Fr Sa Su
                1
2  3  4  5  6  7  8
9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30
